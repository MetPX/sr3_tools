#!/bin/bash

#
# sr3 remove ... will remove the configs on the nodes.
# The git repo needs to be updated to match.
#

# shellcheck source=./bin/sr3_utils
source "${BASH_SOURCE%/*}/sr3_utils"

MAIN_BRANCH="main"

# sets git_tld and pump_name
sr3_get_git_path_pump_name

pump_path="${git_tld}/${pump_name}/"

# Get the absolute paths to the files to be removed
files_to_remove=()
dwr=""
for argu in "$@"; do
    if [[ "$argu" == "remove" ]] ; then
        continue
    fi
    if [[ "$argu" == "--dangerWillRobinson"* ]] ; then
        dwr="${argu}"
	continue
    fi
    if [[ "$argu" == *".conf"* ]] ; then
        files_to_remove+=("${pump_path}${argu}")
    else
        files_to_remove+=("${pump_path}${argu}.conf")
    fi
done

if [ ${#files_to_remove[@]} -eq 0 ]; then
    echo '[ERROR] no files to remove'
    exit 2
fi

# Files must exist
for item in "${files_to_remove[@]}"; do
    # shellcheck disable=SC2059
    for file in ${item}; do 
        if [ ! -f "${file}" ]; then
            echo "[ERROR] File does not exist: ${file}"
            exit 3
        fi
    done
done

# Directory must be controlled by Git
if ! git status > /dev/null; then
    echo '[ERROR] this directory is not version controlled with Git'
    exit 4
fi

# Check for dangerWillRobinson when deleting multiple files
if [[ "$*" != *"--dangerWillRobinson"* ]] && [[ $# -gt 2 ]]; then
    exit 6
fi 
if [[ "$*" == *"--dangerWillRobinson="* ]] && [[ $# -gt 2 ]]; then
    how_many="${dwr##*=}"
    if [ "${#files_to_remove[@]}" != "${how_many}" ] ; then
        echo "[ERROR] ${#files_to_remove[@]} configs to be removed does not match --dangerWillRobinson=${how_many}"
        exit 6
    fi
fi

# Update the repository
if ! git pull origin "${MAIN_BRANCH}"; then
    echo "[ERROR] Problem updating local repository. Please resolve manually and retry."
    exit 7
fi

# Remove the files and commit the change
for item in "${files_to_remove[@]}"; do
    # shellcheck disable=SC2059
    for file in ${item}; do
        cp -p "${file}" "${file}.off"
    done
done

# shellcheck disable=SC2059
# shellcheck disable=SC2068
git rm ${files_to_remove[@]}
git commit

if ! git push origin; then
    echo "[ERROR] Problems were encountered during repository push."
    exit 8
fi

# Nodes get updated from the remote Git repo
sr3_pull
