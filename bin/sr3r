#!/bin/bash

# shellcheck source=./bin/sr3_utils
source "${BASH_SOURCE%/*}/sr3_utils"

if [[ $# == 0
    || ($# == 1 && "$1" == '-h')
    || ($# == 1 && "$1" == '-bg')]]; then
    echo '[ERROR] no command given'
    echo 'Usage: sr3r [-bg] command...'
    echo '       -bg will use --concurrent-shell for DSH'
    echo 'Environment variable SR3TOOLS_DSH_ARGS can be used to pass arguments to DSH.'
    exit 2
fi

# sets git_tld and pump_name
sr3_get_git_path_pump_name

machine_list="${git_tld}/_dsh_config/${pump_name}.list"
if [ ! -e "${machine_list}" ]; then
    echo "[ERROR] dsh machine list does not exist (${machine_list})."
    exit 4
fi

echo "Data Pump Name: ${pump_name}. DSH Machine List: ${machine_list}"

# Handle dsh arguments. --concurrent-shell runs commands on each machine in parallel; --wait-shell is one at a time.
if [ "$1" == '-bg' ]; then
    shift # params shift left by one
    dsh_args="--concurrent-shell ${SR3TOOLS_DSH_ARGS}"
elif [[ "${SR3TOOLS_DSH_ARGS}" == *"--concurrent-shell"* ]] || [[ "${SR3TOOLS_DSH_ARGS}" == *"-c"* ]]; then
    dsh_args="${SR3TOOLS_DSH_ARGS}"
else
    dsh_args="--wait-shell ${SR3TOOLS_DSH_ARGS}"
fi

# Trim leading or trailing whitespace, otherwise dsh complains
dsh_args=$(echo "${dsh_args}" | sed -e 's/ *$//g' | sed -e 's/*$ //g')

# Add ssh user config file (pumpname_ssh_config) to dsh args if present
ssh_user_config="${git_tld}/_dsh_config/${pump_name}_ssh_config"
if [ -e "${ssh_user_config}" ]; then
    dsh_args="${dsh_args} --remoteshellopt -F${ssh_user_config}"
fi

# ssh-agent environment variables are required when proxying the SSH connection through a jump server using `ssh-add`
if [ -e "${ssh_user_config}" ] && { [ -z "${SSH_AUTH_SOCK}" ] || [ -z "${SSH_AGENT_PID}" ]; } && grep -q "ssh-add" "${ssh_user_config}"; then
    eval "$(ssh-agent -s)" > /dev/null
    # issue #23, cleanup ssh agent properly
    trap 'cleanup_ssh_agent' EXIT
    trap 'cleanup_ssh_agent' ERR
    trap 'cleanup_ssh_agent' INT
fi

# Force colours for user-defined commands (SR3TOOLS_COLOUR_CMDS should be a space separated list of commands
# that should be colourized. Example: SR3TOOLS_COLOUR_CMDS="grep ls"
run_cmds="$*"
if [[ -v SR3TOOLS_COLOUR_CMDS ]]; then
    for cmd in ${SR3TOOLS_COLOUR_CMDS}; do
        run_cmds="${run_cmds//${cmd}/${cmd} --color=always}"
    done
fi

# shellcheck disable=SC2086
dsh --remoteshell ssh --show-machine-names ${dsh_args} --file "${machine_list}" "$run_cmds"
